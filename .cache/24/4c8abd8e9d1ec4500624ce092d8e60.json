{"id":"index.js","dependencies":[{"name":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\.babelrc","includedInParent":true,"mtime":1567509708091},{"name":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\package.json","includedInParent":true,"mtime":1567513785467},{"name":"axios","loc":{"line":1,"column":18},"parent":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\index.js","resolved":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\node_modules\\axios\\index.js"},{"name":"./node_modules/node-thermal-printer","loc":{"line":3,"column":29},"parent":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\index.js","resolved":"C:\\Users\\RAKESH\\Desktop\\jquery-admin-panel\\node_modules\\node-thermal-printer\\node-thermal-printer.js"}],"generated":{"js":"\"use strict\";\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ThermalPrinter = require(\"./node_modules/node-thermal-printer\").printer;\n\nvar PrinterTypes = require(\"./node_modules/node-thermal-printer\").types;\n\nvar printer = new ThermalPrinter({\n  type: PrinterTypes.STAR,\n  // Printer type: 'star' or 'epson'\n  interface: 'tcp://xxx.xxx.xxx.xxx',\n  // Printer interface\n  characterSet: 'SLOVENIA',\n  // Printer character set - default: SLOVENIA\n  removeSpecialCharacters: false,\n  // Removes special characters - default: false\n  lineCharacter: \"=\",\n  // Set character for lines - default: \"-\"\n  options: {\n    // Additional options\n    timeout: 5000 // Connection timeout (ms) [applicable only for network printers] - default: 3000\n\n  }\n});\nconsole.log(printer);\n/*\r\nlet isConnected = await printer.isPrinterConnected();       // Check if printer is connected, return bool of status\r\nlet execute = await printer.execute();                      // Executes all the commands. Returns success or throws error\r\nlet raw = await printer.raw(Buffer.from(\"Hello world\"));    // Print instantly. Returns success or throws error\r\n*/\n\nprinter.print(\"Hello World\"); // Append text\n\n/*\r\nprinter.println(\"Hello World\");                             // Append text with new line\r\nprinter.openCashDrawer();                                   // Kick the cash drawer\r\nprinter.cut();                                              // Cuts the paper (if printer only supports one mode use this)\r\nprinter.partialCut();                                       // Cuts the paper leaving a small bridge in middle (if printer supports multiple cut modes)\r\nprinter.beep();                                             // Sound internal beeper/buzzer (if available)\r\nprinter.upsideDown(true);                                   // Content is printed upside down (rotated 180 degrees)\r\nprinter.setCharacterSet(\"SLOVENIA\");                        // Set character set - default set on init\r\n \r\nprinter.bold(true);                                         // Set text bold\r\nprinter.invert(true);                                       // Background/text color inversion\r\nprinter.underline(true);                                    // Underline text (1 dot thickness)\r\nprinter.underlineThick(true);                               // Underline text with thick line (2 dot thickness)\r\nprinter.drawLine();                                         // Draws a line\r\nprinter.newLine();                                          // Insers break line\r\n \r\nprinter.alignCenter();                                      // Align text to center\r\nprinter.alignLeft();                                        // Align text to left\r\nprinter.alignRight();                                       // Align text to right\r\n \r\nprinter.setTypeFontA();                                     // Set font type to A (default)\r\nprinter.setTypeFontB();                                     // Set font type to B\r\n \r\nprinter.setTextNormal();                                    // Set text to normal\r\nprinter.setTextDoubleHeight();                              // Set text to double height\r\nprinter.setTextDoubleWidth();                               // Set text to double width\r\nprinter.setTextQuadArea();                                  // Set text to quad area\r\nprinter.setTextSize(7,7);                                   // Set text height (0-7) and width (0-7)\r\n \r\nprinter.leftRight(\"Left\", \"Right\");                         // Prints text left and right\r\nprinter.table([\"One\", \"Two\", \"Three\"]);                     // Prints table equaly\r\nprinter.tableCustom([                                       // Prints table with custom settings (text, align, width, cols, bold)\r\n  { text:\"Left\", align:\"LEFT\", width:0.5 },\r\n  { text:\"Center\", align:\"CENTER\", width:0.25, bold:true },\r\n  { text:\"Right\", align:\"RIGHT\", cols:8 }\r\n]);\r\n \r\nprinter.code128(\"Code128\");                                 // Print code128 bar code\r\nprinter.printQR(\"QR CODE\");                                 // Print QR code\r\nawait printer.printImage('./assets/olaii-logo-black.png');  // Print PNG image\r\n \r\nprint.clear();                                              // Clears printText value\r\nprint.getText();                                            // Returns printer buffer string value\r\nprint.getBuffer();                                          // Returns printer buffer\r\nprint.setBuffer(newBuffer);                                 // Set the printer buffer to a copy of newBuffer\r\nprint.getWidth();                                           // Get number of characters in one line\r\n  */"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"name":"ThermalPrinter","generated":{"line":7,"column":4},"source":"index.js","original":{"line":2,"column":6}},{"generated":{"line":7,"column":18},"source":"index.js","original":{"line":2,"column":20}},{"name":"require","generated":{"line":7,"column":21},"source":"index.js","original":{"line":2,"column":23}},{"generated":{"line":7,"column":28},"source":"index.js","original":{"line":2,"column":30}},{"generated":{"line":7,"column":29},"source":"index.js","original":{"line":2,"column":31}},{"generated":{"line":7,"column":66},"source":"index.js","original":{"line":2,"column":30}},{"generated":{"line":7,"column":67},"source":"index.js","original":{"line":2,"column":23}},{"name":"printer","generated":{"line":7,"column":68},"source":"index.js","original":{"line":2,"column":70}},{"generated":{"line":7,"column":75},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"name":"PrinterTypes","generated":{"line":9,"column":4},"source":"index.js","original":{"line":3,"column":6}},{"generated":{"line":9,"column":16},"source":"index.js","original":{"line":3,"column":18}},{"name":"require","generated":{"line":9,"column":19},"source":"index.js","original":{"line":3,"column":21}},{"generated":{"line":9,"column":26},"source":"index.js","original":{"line":3,"column":28}},{"generated":{"line":9,"column":27},"source":"index.js","original":{"line":3,"column":29}},{"generated":{"line":9,"column":64},"source":"index.js","original":{"line":3,"column":28}},{"generated":{"line":9,"column":65},"source":"index.js","original":{"line":3,"column":21}},{"name":"types","generated":{"line":9,"column":66},"source":"index.js","original":{"line":3,"column":68}},{"generated":{"line":9,"column":71},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":6,"column":2}},{"name":"printer","generated":{"line":11,"column":4},"source":"index.js","original":{"line":6,"column":6}},{"generated":{"line":11,"column":11},"source":"index.js","original":{"line":6,"column":13}},{"generated":{"line":11,"column":14},"source":"index.js","original":{"line":6,"column":16}},{"name":"ThermalPrinter","generated":{"line":11,"column":18},"source":"index.js","original":{"line":6,"column":20}},{"generated":{"line":11,"column":32},"source":"index.js","original":{"line":6,"column":16}},{"generated":{"line":11,"column":33},"source":"index.js","original":{"line":6,"column":35}},{"name":"type","generated":{"line":12,"column":0},"source":"index.js","original":{"line":7,"column":4}},{"name":"type","generated":{"line":12,"column":2},"source":"index.js","original":{"line":7,"column":4}},{"generated":{"line":12,"column":6},"source":"index.js","original":{"line":7,"column":8}},{"name":"PrinterTypes","generated":{"line":12,"column":8},"source":"index.js","original":{"line":7,"column":10}},{"generated":{"line":12,"column":20},"source":"index.js","original":{"line":7,"column":22}},{"name":"STAR","generated":{"line":12,"column":21},"source":"index.js","original":{"line":7,"column":23}},{"generated":{"line":12,"column":25},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":13,"column":0},"source":"index.js","original":{"line":7,"column":62}},{"name":"interface","generated":{"line":14,"column":0},"source":"index.js","original":{"line":8,"column":4}},{"name":"interface","generated":{"line":14,"column":2},"source":"index.js","original":{"line":8,"column":4}},{"generated":{"line":14,"column":11},"source":"index.js","original":{"line":8,"column":13}},{"generated":{"line":14,"column":13},"source":"index.js","original":{"line":8,"column":15}},{"generated":{"line":14,"column":36},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":8,"column":62}},{"name":"characterSet","generated":{"line":16,"column":0},"source":"index.js","original":{"line":9,"column":4}},{"name":"characterSet","generated":{"line":16,"column":2},"source":"index.js","original":{"line":9,"column":4}},{"generated":{"line":16,"column":14},"source":"index.js","original":{"line":9,"column":16}},{"generated":{"line":16,"column":16},"source":"index.js","original":{"line":9,"column":18}},{"generated":{"line":16,"column":26},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":9,"column":62}},{"name":"removeSpecialCharacters","generated":{"line":18,"column":0},"source":"index.js","original":{"line":10,"column":4}},{"name":"removeSpecialCharacters","generated":{"line":18,"column":2},"source":"index.js","original":{"line":10,"column":4}},{"generated":{"line":18,"column":25},"source":"index.js","original":{"line":10,"column":27}},{"generated":{"line":18,"column":27},"source":"index.js","original":{"line":10,"column":29}},{"generated":{"line":18,"column":32},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":19,"column":0},"source":"index.js","original":{"line":10,"column":62}},{"name":"lineCharacter","generated":{"line":20,"column":0},"source":"index.js","original":{"line":11,"column":4}},{"name":"lineCharacter","generated":{"line":20,"column":2},"source":"index.js","original":{"line":11,"column":4}},{"generated":{"line":20,"column":15},"source":"index.js","original":{"line":11,"column":17}},{"generated":{"line":20,"column":17},"source":"index.js","original":{"line":11,"column":19}},{"generated":{"line":20,"column":20},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":21,"column":0},"source":"index.js","original":{"line":11,"column":62}},{"name":"options","generated":{"line":22,"column":0},"source":"index.js","original":{"line":12,"column":4}},{"name":"options","generated":{"line":22,"column":2},"source":"index.js","original":{"line":12,"column":4}},{"generated":{"line":22,"column":9},"source":"index.js","original":{"line":12,"column":11}},{"generated":{"line":22,"column":11},"source":"index.js","original":{"line":12,"column":12}},{"generated":{"line":23,"column":0},"source":"index.js","original":{"line":12,"column":62}},{"name":"timeout","generated":{"line":24,"column":0},"source":"index.js","original":{"line":13,"column":6}},{"name":"timeout","generated":{"line":24,"column":4},"source":"index.js","original":{"line":13,"column":6}},{"generated":{"line":24,"column":11},"source":"index.js","original":{"line":13,"column":13}},{"generated":{"line":24,"column":13},"source":"index.js","original":{"line":13,"column":15}},{"generated":{"line":24,"column":17},"source":"index.js","original":{"line":12,"column":12}},{"generated":{"line":24,"column":18},"source":"index.js","original":{"line":13,"column":62}},{"generated":{"line":26,"column":0},"source":"index.js","original":{"line":12,"column":12}},{"generated":{"line":27,"column":0},"source":"index.js","original":{"line":6,"column":35}},{"generated":{"line":27,"column":1},"source":"index.js","original":{"line":6,"column":16}},{"generated":{"line":27,"column":2},"source":"index.js","original":{"line":6,"column":2}},{"name":"console","generated":{"line":28,"column":0},"source":"index.js","original":{"line":16,"column":2}},{"generated":{"line":28,"column":7},"source":"index.js","original":{"line":16,"column":9}},{"name":"log","generated":{"line":28,"column":8},"source":"index.js","original":{"line":16,"column":10}},{"generated":{"line":28,"column":11},"source":"index.js","original":{"line":16,"column":2}},{"name":"printer","generated":{"line":28,"column":12},"source":"index.js","original":{"line":16,"column":14}},{"generated":{"line":28,"column":19},"source":"index.js","original":{"line":16,"column":2}},{"generated":{"line":29,"column":0},"source":"index.js","original":{"line":17,"column":3}},{"name":"printer","generated":{"line":35,"column":0},"source":"index.js","original":{"line":22,"column":2}},{"generated":{"line":35,"column":7},"source":"index.js","original":{"line":22,"column":9}},{"name":"print","generated":{"line":35,"column":8},"source":"index.js","original":{"line":22,"column":10}},{"generated":{"line":35,"column":13},"source":"index.js","original":{"line":22,"column":2}},{"generated":{"line":35,"column":14},"source":"index.js","original":{"line":22,"column":16}},{"generated":{"line":35,"column":27},"source":"index.js","original":{"line":22,"column":2}},{"generated":{"line":35,"column":30},"source":"index.js","original":{"line":22,"column":62}},{"generated":{"line":37,"column":0},"source":"index.js","original":{"line":23,"column":2}}],"sources":{"index.js":"import axios from 'axios';\r\nconst ThermalPrinter = require(\"./node_modules/node-thermal-printer\").printer;\r\nconst PrinterTypes = require(\"./node_modules/node-thermal-printer\").types;\r\n\r\n\r\n  let printer = new ThermalPrinter({\r\n    type: PrinterTypes.STAR,                                  // Printer type: 'star' or 'epson'\r\n    interface: 'tcp://xxx.xxx.xxx.xxx',                       // Printer interface\r\n    characterSet: 'SLOVENIA',                                 // Printer character set - default: SLOVENIA\r\n    removeSpecialCharacters: false,                           // Removes special characters - default: false\r\n    lineCharacter: \"=\",                                       // Set character for lines - default: \"-\"\r\n    options:{                                                 // Additional options\r\n      timeout: 5000                                           // Connection timeout (ms) [applicable only for network printers] - default: 3000\r\n    }\r\n  });\r\n  console.log(printer);\r\n   /*\r\n  let isConnected = await printer.isPrinterConnected();       // Check if printer is connected, return bool of status\r\n  let execute = await printer.execute();                      // Executes all the commands. Returns success or throws error\r\n  let raw = await printer.raw(Buffer.from(\"Hello world\"));    // Print instantly. Returns success or throws error\r\n  */\r\n  printer.print(\"Hello World\");                               // Append text\r\n  /*\r\n  printer.println(\"Hello World\");                             // Append text with new line\r\n  printer.openCashDrawer();                                   // Kick the cash drawer\r\n  printer.cut();                                              // Cuts the paper (if printer only supports one mode use this)\r\n  printer.partialCut();                                       // Cuts the paper leaving a small bridge in middle (if printer supports multiple cut modes)\r\n  printer.beep();                                             // Sound internal beeper/buzzer (if available)\r\n  printer.upsideDown(true);                                   // Content is printed upside down (rotated 180 degrees)\r\n  printer.setCharacterSet(\"SLOVENIA\");                        // Set character set - default set on init\r\n   \r\n  printer.bold(true);                                         // Set text bold\r\n  printer.invert(true);                                       // Background/text color inversion\r\n  printer.underline(true);                                    // Underline text (1 dot thickness)\r\n  printer.underlineThick(true);                               // Underline text with thick line (2 dot thickness)\r\n  printer.drawLine();                                         // Draws a line\r\n  printer.newLine();                                          // Insers break line\r\n   \r\n  printer.alignCenter();                                      // Align text to center\r\n  printer.alignLeft();                                        // Align text to left\r\n  printer.alignRight();                                       // Align text to right\r\n   \r\n  printer.setTypeFontA();                                     // Set font type to A (default)\r\n  printer.setTypeFontB();                                     // Set font type to B\r\n   \r\n  printer.setTextNormal();                                    // Set text to normal\r\n  printer.setTextDoubleHeight();                              // Set text to double height\r\n  printer.setTextDoubleWidth();                               // Set text to double width\r\n  printer.setTextQuadArea();                                  // Set text to quad area\r\n  printer.setTextSize(7,7);                                   // Set text height (0-7) and width (0-7)\r\n   \r\n  printer.leftRight(\"Left\", \"Right\");                         // Prints text left and right\r\n  printer.table([\"One\", \"Two\", \"Three\"]);                     // Prints table equaly\r\n  printer.tableCustom([                                       // Prints table with custom settings (text, align, width, cols, bold)\r\n    { text:\"Left\", align:\"LEFT\", width:0.5 },\r\n    { text:\"Center\", align:\"CENTER\", width:0.25, bold:true },\r\n    { text:\"Right\", align:\"RIGHT\", cols:8 }\r\n  ]);\r\n   \r\n  printer.code128(\"Code128\");                                 // Print code128 bar code\r\n  printer.printQR(\"QR CODE\");                                 // Print QR code\r\n  await printer.printImage('./assets/olaii-logo-black.png');  // Print PNG image\r\n   \r\n  print.clear();                                              // Clears printText value\r\n  print.getText();                                            // Returns printer buffer string value\r\n  print.getBuffer();                                          // Returns printer buffer\r\n  print.setBuffer(newBuffer);                                 // Set the printer buffer to a copy of newBuffer\r\n  print.getWidth();                                           // Get number of characters in one line\r\n\r\n  */"},"lineCount":null}},"error":null,"hash":"91c04dd5aadeff950a7e0b4111982f3d","cacheData":{"env":{}}}